{
  "server": {
    "transport": "stdio",
    "command": "node",
    "args": ["./dist/example-server.js"]
  },
  "oauth2Suites": [
    {
      "name": "OAuth 2.1 Enhanced Authentication Testing",
      "description": "Comprehensive OAuth 2.1 flow testing with PKCE, resource indicators, and multi-tenant support",
      "authorizationCodeTests": [
        {
          "name": "Authorization Code Flow with PKCE",
          "description": "Test standard authorization code flow with PKCE security",
          "flow": "authorization_code",
          "server": {
            "authorizationEndpoint": "https://auth.example.com/authorize",
            "tokenEndpoint": "https://auth.example.com/token",
            "revocationEndpoint": "https://auth.example.com/revoke",
            "supportedGrantTypes": ["authorization_code"],
            "supportedScopes": ["read", "write", "admin"],
            "pkceRequired": true
          },
          "client": {
            "clientId": "test-client-id",
            "responseType": "code",
            "scope": ["read", "write"],
            "redirectUri": "https://app.example.com/callback",
            "pkce": {
              "enabled": true,
              "codeChallengeMethod": "S256"
            }
          },
          "authorizationParams": {
            "prompt": "consent"
          },
          "simulateUserConsent": true,
          "expectedResult": "success",
          "securityChecks": {
            "validatePKCE": true,
            "validateState": true,
            "validateNonce": true,
            "checkTokenExpiration": true
          }
        },
        {
          "name": "Authorization Code with Resource Indicators",
          "description": "Test authorization code flow with RFC 8707 resource indicators",
          "flow": "authorization_code",
          "server": {
            "authorizationEndpoint": "https://auth.example.com/authorize",
            "tokenEndpoint": "https://auth.example.com/token",
            "supportedGrantTypes": ["authorization_code"],
            "supportedScopes": ["api:read", "api:write"],
            "resourceIndicatorsSupported": true
          },
          "client": {
            "clientId": "resource-client",
            "responseType": "code",
            "scope": ["api:read"],
            "redirectUri": "https://app.example.com/callback",
            "resourceIndicators": [
              {
                "resourceUri": "https://api.example.com",
                "audienceRestriction": true
              }
            ]
          },
          "simulateUserConsent": true,
          "expectedResult": "success",
          "securityChecks": {
            "validateAudience": true,
            "checkScopeRestriction": true
          }
        }
      ],
      "clientCredentialsTests": [
        {
          "name": "Client Credentials Flow",
          "description": "Test machine-to-machine authentication",
          "flow": "client_credentials",
          "server": {
            "authorizationEndpoint": "https://auth.example.com/authorize",
            "tokenEndpoint": "https://auth.example.com/token",
            "supportedGrantTypes": ["client_credentials"],
            "supportedScopes": ["api:service"]
          },
          "client": {
            "clientId": "service-client",
            "clientSecret": "service-secret",
            "scope": ["api:service"]
          },
          "clientAuthentication": "client_secret_basic",
          "expectedResult": "success",
          "securityChecks": {
            "checkTokenExpiration": true,
            "checkScopeRestriction": true
          }
        }
      ],
      "deviceCodeTests": [
        {
          "name": "Device Code Flow",
          "description": "Test device authorization for input-limited devices",
          "flow": "device_code",
          "server": {
            "authorizationEndpoint": "https://auth.example.com/authorize",
            "tokenEndpoint": "https://auth.example.com/token",
            "deviceAuthorizationEndpoint": "https://auth.example.com/device_authorization",
            "supportedGrantTypes": [
              "urn:ietf:params:oauth:grant-type:device_code"
            ],
            "supportedScopes": ["device:read"]
          },
          "client": {
            "clientId": "device-client",
            "scope": ["device:read"]
          },
          "pollingInterval": 5,
          "simulateUserAuthorization": true,
          "expectedResult": "success"
        }
      ],
      "tokenManagementTests": [
        {
          "name": "Token Refresh Test",
          "description": "Test refresh token functionality",
          "testType": "refresh",
          "token": {
            "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL2F1dGguZXhhbXBsZS5jb20iLCJzdWIiOiJ1c2VyMTIzIiwiYXVkIjoiaHR0cHM6Ly9hcGkuZXhhbXBsZS5jb20iLCJleHAiOjk5OTk5OTk5OTksImlhdCI6MTYwMDAwMDAwMCwic2NvcGUiOiJyZWFkIHdyaXRlIn0.mock-signature",
            "refreshToken": "refresh-token-example",
            "tokenType": "Bearer",
            "expiresIn": 3600,
            "scope": ["read", "write"]
          },
          "expectedResult": "success",
          "validateTokenClaims": true
        },
        {
          "name": "Token Expiration Test",
          "description": "Test token expiration validation",
          "testType": "expiration",
          "token": {
            "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL2F1dGguZXhhbXBsZS5jb20iLCJzdWIiOiJ1c2VyMTIzIiwiYXVkIjoiaHR0cHM6Ly9hcGkuZXhhbXBsZS5jb20iLCJleHAiOjE2MDAwMDAwMDAsImlhdCI6MTYwMDAwMDAwMCwic2NvcGUiOiJyZWFkIn0.mock-signature",
            "tokenType": "Bearer",
            "scope": ["read"]
          },
          "expectedResult": "failure",
          "checkTokenSecurity": true
        }
      ],
      "pkceValidationTests": [
        {
          "name": "Valid PKCE S256 Challenge",
          "description": "Test valid PKCE code challenge validation",
          "codeChallengeMethod": "S256",
          "invalidChallenge": false,
          "expectedResult": "success",
          "securityLevel": "high"
        },
        {
          "name": "Invalid PKCE Challenge",
          "description": "Test rejection of invalid PKCE challenge",
          "codeChallengeMethod": "S256",
          "invalidChallenge": true,
          "expectedResult": "failure",
          "securityLevel": "high"
        }
      ],
      "resourceIndicatorTests": [
        {
          "name": "Resource-Specific Token",
          "description": "Test RFC 8707 resource indicators for audience restriction",
          "resourceUri": "https://api.example.com",
          "requestedScopes": ["api:read", "api:write"],
          "expectedAudience": "https://api.example.com",
          "crossResourceAccess": false,
          "validateAudienceRestriction": true,
          "expectedResult": "success"
        },
        {
          "name": "Cross-Resource Access Block",
          "description": "Test blocking of cross-resource access",
          "resourceUri": "https://api.example.com",
          "requestedScopes": ["api:read"],
          "crossResourceAccess": true,
          "validateAudienceRestriction": true,
          "expectedResult": "success"
        }
      ],
      "multiTenantTests": [
        {
          "name": "Same Tenant Access",
          "description": "Test access within the same tenant",
          "primaryTenant": {
            "tenantId": "tenant-123",
            "tenantDomain": "company.example.com",
            "isolationLevel": "strict",
            "crossTenantAccess": false
          },
          "testScenario": "same_tenant_access",
          "expectedResult": "success",
          "validateTenantIsolation": true
        },
        {
          "name": "Cross-Tenant Access Blocked",
          "description": "Test that cross-tenant access is properly blocked",
          "primaryTenant": {
            "tenantId": "tenant-123",
            "isolationLevel": "strict",
            "crossTenantAccess": false
          },
          "secondaryTenant": {
            "tenantId": "tenant-456",
            "isolationLevel": "strict",
            "crossTenantAccess": false
          },
          "testScenario": "cross_tenant_blocked",
          "expectedResult": "success",
          "validateTenantIsolation": true
        }
      ],
      "parallel": false,
      "timeout": 30000
    }
  ],
  "timeout": 60000,
  "llmJudge": false
}
